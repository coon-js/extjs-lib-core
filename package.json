{
    /**
     * The name of the package.
     */
    "name": "lib-cn_core",

    /**
     * Alternate names for this package.
     *
     *    "alternateName": [],
     */

     /**
      * The namespace of this package.
      *
      * As a general rule, all classes that belong to this package should be under this namespace
      * if multiple namespaces are part of this package, set this to "".
      */
     "namespace": "conjoon.cn_core",

    /**
     * The package type.
     *
     * Sencha Cmd understands the following types of packages:
     *  - code : An arbitrary package of code for use by applications or other packages.
     *  - theme : A package to be used as an applicationâ€™s theme.
     *  - locale : A package containing localization strings or locale-specific code.
     *  - template : A package containing one or more templates.
     */
    "type": "code",

    /**
      * The author of the package.
      *
      * Required only if you are distributing this package through a Sencha Cmd repository,
      * in which case it should match the name you assign to your local package repository.
      */
    "creator": "conjoon Open Source Project",

    /**
     * A summarized description of this package.
     */
    "summary": "A collection of core functionality for the conjoon Open Source Project.",

    /**
     * A detailed description of this package.
     */
    "detailedDescription": "This package contains extended and advanced implementations for ExtJS projects which are not directly related to view components. This makes the package useable in other projects as well.",

    /**
     * The package version.
     *
     * Typically, changes to the package should come along with changes to the version.
     * This number should be in this format: d+(.d+)*
     */
    "version": "0.1",

    /**
     * The version that users can transparently update from without requiring code changes.
     *
     * In addition the version property, packages can also indicate the degree to which
     * they are backward compatible using the compatVersion property.
     */
    "compatVersion": "0.1",

    /**
     * Spec. version of this package.json file.
     * This is set automatically by Sencha Cmd when first generating this file
     */
    "format": "1",

    /**
     * Controls the output directory.
     */
    "output": "${package.dir}/build",

    /**
     * Indicates whether this is a locally developed package or downloaded form a repository.
     * Defaults to true on newly generated packages, should not be changed.
     */
    "local": true,

    /**
     * This is the comma-separated list of folders where classes reside. These
     * classes must be explicitly required to be included in the build.
     */
    "classpath": [
        "${package.dir}/src",
        "${package.dir}/${toolkit.name}/src"
    ],

    /**
     * Comma-separated string with the paths of directories or files to search. Any classes
     * declared in these locations will be automatically required and included in the build.
     * If any file defines an Ext JS override (using Ext.define with an "override" property),
     * that override will in fact only be included in the build if the target class specified
     * in the "override" property is also included.
     */
    "overrides": [
        "${package.dir}/overrides",
        "${package.dir}/${toolkit.name}/overrides"
    ],

    "framework": "ext",

    "requires": [
        "sencha-core"
    ]
}